import org.apache.tools.ant.taskdefs.condition.Os

ext {
    // The drivers we want to use
    drivers = ["chrome", "phantomJs"]

    ext {
        groovyVersion = '2.4.1'
        gebVersion = '0.10.0'
        seleniumVersion = '2.43.1'
        chromeDriverVersion = '2.10'
        phantomJsVersion = '1.9.7'
    }
}

apply plugin: "groovy"
apply from: "gradle/osSpecificDownloads.gradle"

repositories {
   jcenter()
}

dependencies {
    // If using Spock, need to depend on geb-spock
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }

    // Drivers
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile("com.github.detro.ghostdriver:phantomjsdriver:1.1.0") {
        // phantomjs driver pulls in a different selenium version
        transitive = false
    }
}

def loadProperties() {
    def environment = hasProperty('env') ? env : 'dev'
    println "Environment is set to $environment"

    def configFile = file('Config.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURL())
    setProperty 'config', config
}
loadProperties()

drivers.each { driver ->
    task "${driver}Test"(type: Test) {

        systemProperty 'UI_URL', config.ui.url
        systemProperty 'API_URL', config.api.url

        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver
    }
}

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

phantomJsTest {
    dependsOn unzipPhantomJs

    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

test {
    dependsOn chromeTest
    enabled = false
}
